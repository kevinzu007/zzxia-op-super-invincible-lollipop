## docker cluster 服务部署清单
###
###  0 公共参数（ *** 对所有项目生效，以#开头的无效，以空格开头无效，可以是变量 *** ）：
###    DOCKER_LOG_PUB :      Docker通用日志参数变量。定义在【deploy.env---*】文件中，仅对【swarm】集群有效
###    DOCKER_ARG_PUB :      Docker通用运行参数文件。文件名【docker-arg-pub.list---*】，仅对【swarm】集群有效
###    CONTAINER_HOSTS_PUB : 所有容器中的hosts定义文件。文件名【container-hosts-pub.list---*】
### 
###    CONTAINER_ENVS_PUB :  所有容器中的变量定义文件。文件名【~/.my_sec/container-envs-pub.sec】(因为包含用户密码相关信息，所以不保存于当前仓库)
###    JAVA_OPTIONS_PUB :    所有容器中的JAVA_OPTIONS变量定义文件。文件名【java-options-pub.list---*】。要使【JAVA_OPTIONS】变量生效，需在docker镜像中指定使用此变量
### 
###  ---------------------------------------------------------------------------------------
### 
###  2【服务名：SERVICE_NAME】= [ 自定义名称 ] 
### 
###  3【DOCKER镜像名：DOCKER_IMAGE_NAME】= [ 自定义名称 ]
### 
###  4【POD副本数：POD_REPLICAS】= [ 数字|${变量名} ]
###    1 数字          : 例如：2
###    2 ${变量名}     : 例如：【${SERVICE_NAME}】
### 
###  5【容器PORTS：CONTAINER_PORTS】= [ 外部端口号1:内部端口号2, 外部端口号3:内部端口号4, ...... , ${变量名} ]
###    若有多个，则用【,】分隔
###    示例：【17474:7474】
###          【${xName}:7474】
###          【27474:7474,7687:7687】
### 
###  6【JAVA选项：JAVA_OPTIONS】= [ Java参数1 , Java参数2, Java参数n, JAVA_OPT_FROM_FILE="/path/to/filename" ]
###    如果有多个，则用【,】号分隔，例如：【-Dencoding=UTF-8,-Dfile=${FILE},JAVA_OPT_FROM_FILE="/path/to/filename"】
###    -  指定为具体参数，例如：【-Dencoding=UTF-8】
###    -  指定变量参数，例如：【-Dfile=${FILE}】
###    -  指定从文件获取，参数名需指定为【JAVA_OPT_FROM_FILE】，例如：【JAVA_OPT_FROM_FILE="/path/to/filename"】，建议放在【init/my_envs/】目录下，用git管理
### 
###  7【容器ENVS：CONTAINER_ENVS】= [ 变量1=值1, 变量2=值2, 变量n=值n, ENVS_FROM_FILE="/path/to/filename"]
###    如果有多个，则用【,】号分隔，例如：【aa=1,bb=2,NEO4J_AUTH=${NEO4J_USER}/${NEO4J_PASSWORD},ENVS_FROM_FILE="/path/to/filename"】
###    - 指定为具体参数，例如：【aa=1,bb=2】
###    - 指定变量参数，例如：【NEO4J_AUTH=${NEO4J_USER}/${NEO4J_PASSWORD}】
###    - 指定从文件获取，参数名需指定为【ENVS_FROM_FILE】，例如【ENVS_FROM_FILE="/path/to/filename"】，建议放在【init/my_envs/】目录下，用git管理
### 
###  8【容器CMDS：CONTAINER_CMDS】= [ 命令参数2, 命令参数n, CMDS_FROM_FILE="/path/to/filename" ]
###    如果有多个，则用【,】号分隔，例如：【--quiet,--requirepass "${REDIS_PASSWORD}",CMDS_FROM_FILE="/path/to/filename"】
###    - 指定为具体参数，例如：【--quiet】
###    - 指定变量参数，例如：【--requirepass "${REDIS_PASSWORD}"】
###    - 指定从文件获取，参数名需指定为【CMDS_FROM_FILE】，例如【CMDS_FROM_FILE="/path/to/filename"】，建议放在【init/my_envs/】目录下，用git管理
### 
###  9【优先级：PRIORITY】= [ 数字 ]
###    数字越小越优先
###
### 10【集群：CLUSTER】= [ swarm|k8s|compose|自定义 ]
###    1 swarm       : swarm
###    2 k8s         : k8s
###    3 compose     : docker-compose
###
### 11【部署位置：DEPLOY_PLACEMENT】= [ NET:网络 , L:label键值对 | NS:命名空间, L:label键值对 | SSH:<用户@>主机名或IP <-p ssh端口> ]
###    1 集群='swarm'      : NET:网络, L:label键值对             : NET 即network，默认在deploy.env---*中定义，这里可以省略
###                                                              : L 即Label，指定标签，可以有多个，代表服务部署到这个标签主机节点，可以不指定
###    2 集群='k8s'        : NS:命名空间, L:label键值对          : NS 即k8s命名空间，默认在deploy.env---*中定义，这里可以省略
###                                                              : L 同上，即Label，指定标签，可以有多个，代表服务部署到这个标签主机节点，可以不指定
###    3 集群='compose'    : SSH:<用户@>主机名或IP <-p ssh端口>  : 需要ssh到目标节点实现免密码登录，【用户名】及【ssh端口】可以省略
###    若有多个参数，则用【,】分隔
###    示例：【L:node=worker_node_2】
###          【NET:net1, L:node=worker, L:aa=bbb】
###          【NET:net1】
###          【NS:demo_space, L:node=worker, L:aa=bbb】
###          【NS:demo_space】
###          【SSH:root@192.168.11.77 -p 22】
###          【SSH:192.168.11.77】
###
###   ***** 以上种种，都可以自己定义，然后调整相关脚本即可 *****
###
###   ***** 上文提到的变量名可以是下文表头的名字、也可以是sh中可以获得的变量名 *****
###
#| SERVICE_NAME      | DOCKER_IMAGE_NAME | POD_REPLICAS  | CONTAINER_PORTS | JAVA_OPTIONS    | CONTAINER_ENVS     | CONTAINER_CMDS     | PRIORITY   | CLUSTER  | DEPLOY_PLACEMENT  |
#| **服务名**        | **DOCKER镜像名**  | **POD副本数** | **容器PORTS**   | **JAVA选项**    | **容器ENVS**       | **容器CMDS**       | **优先级** | **集群** | **部署位置**      |
#| ----------------- | ----------------- | ------------: | -----------  -- | --------------: | ------------------ | ------------------ | ---------- | -------- | ----------------- |
| neo4j-srv          | neo4j                         | 1 | 7474:7474,7687:7687   |           | NEO4J_AUTH="${NEO4J_USER}/${NEO4J_PASSWORD}" | | 0   | swarm    |                   |
| redis-srv          | redis                         | 1 | 6379:6379             |           |            | --requirepass "${REDIS_PASSWORD}" | 0   | swarm    |                   |
| rabbitmq-srv       | rabbitmq                      | 1 | 5672:5672,15672:15672 |           | RABBITMQ_DEFAULT_USER="${RABBITMQ_USER}",RABBITMQ_DEFAULT_PASS="${RABBITMQ_PASSWORD}" | |0|swarm| |
| gc-gateway         | gc-gateway                    | 1 | 13000:13000 | -Xms512m -Xmx512m   |                    |                    | 15         | swarm    |                   |
| gc-monitor         | gc-monitor                    | 1 | :13030      | -Xms512m -Xmx512m   |                    |                    | 20         | swarm    |                   |
| gc-client-service  | gc-client-service             | 1 | :23000      | -Xms512m -Xmx512m   |                    |                    | 20         | k8s      |                   |
| gc-client-app-service | gc-client-app-service      | 1 | :23100      | -Xms512m -Xmx512m   |                    |                    | 20         | compose  | SSH:192.168.11.77 |
| gc-travel-service  | gc-travel-service             | 1 | :20201      | -Xms512m -Xmx512m   |                    |                    | 20         | k8s      |                   |

